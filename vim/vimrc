if v:progname =~? "evim"
    finish
endif

" Use old regex engine for speed
if v:version >= 704
    set re=1
endif

set ttyfast
set lazyredraw

call pathogen#infect()
" work's env sets term to something dumb. Make vim not care.
" set term=xterm

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

set nobackup
set history=1000
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set cmdheight=2

" Line Wrap stuff
set wrap        " wrap lines

" Disable vim help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

set cursorline  " highlights the current line

" Way better command completion
set wildmenu
set wildmode=longest:full,list:full
set wildignore=*.swp,*.bak,*.pyc,*.class

" Have to wait for Terminal.app to support true color for this:
" set termguicolors
set t_Co=256
syntax on
set bg=dark
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
colorscheme gruvbox
" Don't draw a bgcolor (let the terminal choose it)
highlight Normal ctermbg=none

set autoindent		" always set autoindenting on
set nohlsearch
set noincsearch

set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set cino=N-s " don't indent namespaces in C++

filetype indent on

au BufNewFile,BufRead *.htmlt set filetype=html
au BufNewFile,BufRead *.asm set filetype=nasm
au BufNewFile,BufRead *.go set filetype=go
au BufNewFile,BufRead *.pp set filetype=puppet
au BufNewFile,BufRead *.coffee set filetype=coffee
au BufNewFile,BufRead *.coffee.erb set filetype=coffee
au BufNewFile,BufRead *.rabl set filetype=ruby
au BufNewFile,BufRead Capfile set filetype=ruby
au BufNewFile,BufRead Gemfile set filetype=ruby
au BufNewFile,BufRead Podfile set filetype=ruby
au BufNewFile,BufRead *.rb set filetype=ruby
au BufNewFile,BufRead *.vp,*.fp,*.gp,*.vs,*.fs,*.gs,*.tcs,*.tes,*.vert,*.frag,*.geom,*.tess,*.shd,*.gls,*.glsl set ft=glsl330

autocmd FileType ruby,puppet,yaml,javascript set sw=2 ts=2 et
autocmd FileType make,jade set noet
autocmd FileType go set ts=8 sw=8 noet


" Clear treailing whitespace for some languages
autocmd FileType ruby,puppet,coffee,go autocmd BufWritePre <buffer> :%s/\s\+$//e

" Custom commands
map <Space> <Leader>
map , <Leader>
map <Leader>, :NERDTreeToggle<cr>
map <Leader><Space> :NERDTreeToggle<cr>
map <Leader>f :NERDTreeFind<cr>
map <silent> <Leader>b :BufExplorer<cr>
map <silent> <Leader>s :split<cr>


" Buffer switching easier
set hidden
map <C-right> :bnext<cr>
map <C-left> :bprev<cr>

" Better comment formatting defaults
set formatoptions+=r

if has('patch541')
  set formatoptions+=j
end

" Prevent the global gvimrc for macvim (/Applications/MacVim/.../gvimrc) from
" setting colorscheme and overriding what we set here.
let macvim_skip_colorscheme=1
set guifont=Menlo\ Regular:h13
"set transparency=10

" Inspect color under cursor for color scheme debugging
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif

auto VimLeave * :set t_ts=k.\
" The only correct unicode encoding.
set encoding=utf-8

if has("gui_running")
    set mouse=a
else
    " In cli I'd rather have my terminal emulator do things like selection
    set mouse=
endif
"map <ScrollWheelUp> <C-Y>
"map <ScrollWheelDown> <C-E>

" Set bufexplorer options so that <Leader>b just goes straight to a horizontal split
let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerFindActive=1

let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/]((\.git|\.hg|\.svn)|node_modules|vendor)$'
  \}
let g:ctrlp_max_files=100000

filetype plugin on

" I hate folding.
set nofoldenable

" disable bells in gvim/macvim
"
set t_vb=
set visualbell

" Rust stuff
let g:rustfmt_autosave = 1

" Prevent ObjC indentation from trying to align colons (it's bad at it.)
function GetObjCIndent()
    let theIndent = cindent(v:lnum)
    return theIndent
endfunction

""" BEGIN coq suggested config

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

""" END Coq suggested config
